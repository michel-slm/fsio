var searchIndex = JSON.parse('{\
"fsio":{"doc":"fsio","i":[[0,"directory","fsio","directory",null,null],[5,"create","fsio::directory","Creates the directory (and if needed the parent…",null,[[],[["fsioerror",3],["result",4]]]],[5,"create_parent","","Creates the parent directory (and if needed the parent…",null,[[],[["fsioerror",3],["result",4]]]],[5,"delete","","Deletes the directory and any child file/directory.",null,[[],[["fsioerror",3],["result",4]]]],[0,"error","fsio","error",null,null],[3,"FsIOError","fsio::error","Error struct",null,null],[12,"info","","Holds the error information",0,null],[4,"ErrorInfo","","Holds the error information",null,null],[13,"PathAlreadyExists","","Path already exist error type",1,null],[13,"NotFile","","Not a file error type",1,null],[13,"IOError","","IO error type",1,null],[13,"SystemTimeError","","System time error type",1,null],[0,"file","fsio","file",null,null],[5,"ensure_exists","fsio::file","Ensures the provided path leads to an existing file. If…",null,[[],[["fsioerror",3],["result",4]]]],[5,"write_text_file","","Creates and writes the text to the requested file path. If…",null,[[],[["fsioerror",3],["result",4]]]],[5,"append_text_file","","Appends (or creates) and writes the text to the requested…",null,[[],[["fsioerror",3],["result",4]]]],[5,"write_file","","Creates and writes the raw data to the requested file…",null,[[],[["fsioerror",3],["result",4]]]],[5,"append_file","","Appends (or creates) and writes the raw data to the…",null,[[],[["fsioerror",3],["result",4]]]],[5,"modify_file","","Overwrites or appends the requested file and triggers the…",null,[[["fn",8]],[["fsioerror",3],["result",4]]]],[5,"read_text_file","","Reads the requested text file and returns its content.",null,[[],[["string",3],["result",4],["fsioerror",3]]]],[5,"read_file","","Reads the requested file and returns its content.",null,[[],[["result",4],["fsioerror",3],["vec",3]]]],[5,"delete","","Deletes the requested file. If the file does not exist,…",null,[[],[["fsioerror",3],["result",4]]]],[5,"delete_ignore_error","","Deletes the requested file. If the file does not exist,…",null,[[]]],[0,"path","fsio","path",null,null],[5,"canonicalize_as_string","fsio::path","Returns a canonicalized string from the provided path value.",null,[[],[["string",3],["result",4],["fsioerror",3]]]],[5,"canonicalize_or","","Returns a canonicalized string from the provided path value.",null,[[],["string",3]]],[5,"get_basename","","Returns the last path component (file name or last…",null,[[],[["string",3],["option",4]]]],[5,"get_parent_directory","","Returns the parent path.",null,[[],[["string",3],["option",4]]]],[5,"get_last_modified_time","","Returns the last modified time of the provided path in…",null,[[],[["result",4],["fsioerror",3]]]],[0,"as_path","","as_path",null,null],[8,"AsPath","fsio::path::as_path","Defines as path trait.",null,null],[10,"as_path","","Converts to a path reference.",2,[[],["path",3]]],[0,"from_path","fsio::path","from_path",null,null],[8,"FromPath","fsio::path::from_path","Defines as path trait.",null,null],[10,"from_path","","Converts from a path reference.",3,[[["path",3]]]],[11,"from","fsio::error","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","Formats the error using the given formatter.",0,[[["formatter",3]],[["error",3],["result",4]]]]],"p":[[3,"FsIOError"],[4,"ErrorInfo"],[8,"AsPath"],[8,"FromPath"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);